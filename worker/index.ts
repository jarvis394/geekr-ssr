/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

import { clientsClaim, setCacheNameDetails } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import {
  NetworkFirst,
  StaleWhileRevalidate,
  CacheFirst,
} from 'workbox-strategies'

declare const self: ServiceWorkerGlobalScope

// Disable logging in dev environment
self.__WB_DISABLE_DEV_LOGS = true

clientsClaim()

// Precache all of the assets generated by the build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in the service worker file.
const WB_MANIFEST = self.__WB_MANIFEST || []
precacheAndRoute(WB_MANIFEST)

setCacheNameDetails({
  prefix: 'geekr-app',
  suffix: 'v3',
  precache: 'precache',
  runtime: 'runtime',
})

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({ type: 'SKIP_WAITING' })
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

const newResponse = (
  res: Response,
  headerFn: (headers: Headers) => Headers
): Promise<void | Response> => {
  const cloneHeaders = () => {
    const headers = new Headers()
    res.headers.forEach((value, key) => {
      headers.append(key, value)
    })
    return headers
  }

  const headers = headerFn ? headerFn(cloneHeaders()) : res.headers

  return new Promise((resolve) =>
    res.blob().then((blob) => {
      resolve(
        new Response(blob, {
          status: res.status,
          statusText: res.statusText,
          headers,
        })
      )
    })
  )
}

const cacheHeaderPlugin = [
  {
    cacheWillUpdate: ({ response }) =>
      newResponse(response.clone(), (headers: Headers) => {
        headers.set('x-sw-cache', new Date().getTime().toString())
        return headers
      }),
  },
]

registerRoute(
  /^https?:\/\/.*\/kek\/(v1|v2)\/.*/,
  new NetworkFirst({
    networkTimeoutSeconds: 10,
    cacheName: 'api-cache',
    plugins: [
      ...cacheHeaderPlugin,
      new CacheableResponsePlugin({
        statuses: [200, 302],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60 * 7, // one week
        maxEntries: 100,
      }),
    ],
  })
)

registerRoute(
  /^https?:\/\/habra.jarvis394\.ml\/.*/,
  new NetworkFirst({
    networkTimeoutSeconds: 10,
    cacheName: 'api-cache',
    plugins: [
      ...cacheHeaderPlugin,
      new CacheableResponsePlugin({
        statuses: [200, 302],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60 * 7, // one week
        maxEntries: 100,
      }),
    ],
  })
)

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  /^https:\/\/fonts\.googleapis\.com/,
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
)

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  /^https:\/\/fonts\.gstatic\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
)

// Cache local fonts
registerRoute(
  /.*\/fonts\/.*/,
  new CacheFirst({
    cacheName: 'geekr-fonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
)
